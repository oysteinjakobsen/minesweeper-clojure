cmdhistory=["(nytt-brett 3 4 5)" "(nytt-brett 2 3 4)" "(klarer-omrade {} \\"x\\")" "(spill 2 3 4)" "23" "(spill 2 3 4)" "44" "(spill 2 3 4)" "34" "(spill 2 3 4)" "(get-in {\:a {\:1 \\"a1\\" \:2 \\"a2\\"} \:b {\:1 \\"b1\\" \:2 \\"b2\\"}} [\:b \:1])" "(get-in {\\"a\\" {\\"1\\" \\"a1\\" \\"2\\" \\"a2\\"} \\"b\\" {\\"1\\" \\"b1\\" \\"2\\" \\"b2\\"}} [\\"b\\" \\"1\\"])" "(int \\"A\\")" "(char \\"A\\")" "(char (get \\"A\\" 0))" "(int (get \\"A\\" 0))" "(get \\"A\\" 0)" "(str (get \\"A\\" 0))" "(tolk-koordinat-streng \\"B5\\")" "(int \\"A\\")" "(int (get \\"A\\" 0))" "(int (get \\"4\\" 0))" "(int \\"56\\")" "(int (read-string \\"44\\"))" "(tolk-koordinat-streng \\"B5\\")" "(tolk-koordinat-streng \\"X45\\")" "(doc tolk-koordinat-streng)" "(tolk-koordinat-streng \\"B23\\")" "(keyword \\"B4\\")" "(keyword 4)" "(keyword \\"4\\")" "(tolk-koordinat-streng \\"B34\\")" "(vector '(a b c))" "(vector (a b c)\\n        )" "(tolk-koordinat-streng \\"B34\\")" "(map keyword '(\\"B\\" \\"34\\"))" "(get-in {\\"a\\" {\\"1\\" \\"a1\\" \\"2\\" \\"a2\\"} \\"b\\" {\\"1\\"\\t\\"b1\\" \\"2\\" \\"b2\\"}} [\\"b\\" \\"1\\"])" "(get-in {\\"a\\" {\\"1\\" \\"a1\\" \\"2\\" \\"a2\\"} \\"b\\" {\\"1\\"\\t\\"b1\\" \\"2\\" \\"b2\\"}} '(\\"b\\" \\"1\\"))" "(vector tolk-koordinat-streng \\"B232\\")" "(vector (tolk-koordinat-streng \\"B23\\"))" "(tolk-koordinat-streng \\"B23\\")" "(doc tolk-koordinat-streng)" "(int \:3)" "(str \:3)" "(tolk-koordinat-streng \\"B23\\")" "(defn splitt-koordinat-streng\\r\\n  \\"Splitter f.eks. \\\\\\"B12\\\\\\" til [\\\\\\"B\\\\\\" \\"12\\"].\\"\\r\\n  [koordinat-streng]\\r\\n  [(subs koordinat-streng 0 1) (subs koordinat-streng 1)])" "(tolk-koordinat-streng \\"B23\\")" "(splitt-koordinat-streng \\"B23\\")" "(finn-nabo-koordinater [\\"B\\" \\"34\\"])" "(finn-nabo-koordinater [\\"B\\" \\"34\\"] 9 10)" "(str 23)" "(for [b [\\"A\\" \\"B\\" \\"C\\"] h [\\"3\\" \\"4\\" \\"5\\"]] (str b h))" "(range \\"B\\" \\"F\\")" "(range 5 9)" "(str \:12)" "(range (min (- 10 1) 0))" "(range (min (- 10 1) 0) (max (+ 10 2) 20))" "(range (max (- 10 1) 0) (min (+ 10 2) 20))" "(range (max (- 1 1) 1) (min (+ 1 2) 20))" "(range (max (- 20 1) 1) (min (+ 20 2) 20))" "(range (max (- 20 1) 1) (min (+ 20 2) 21))" "(do\\n  (let rad 20)\\n  (range (max (- rad 1) 1) (min (+ rad 2) 21)))" "(do\\n  (def rad 20)\\n  (range (max (- rad 1) 1) (min (+ rad 2) 21)))" "(do\\n  (def rad 10)\\n  (range (max (- rad 1) 1) (min (+ rad 2) 21)))" "(+ \\"A\\" 1)" "(seq \\"gunnar\\")" "(do\\n  (def rad 10)\\n  (range (max (- rad 1) 1) (min (+ rad 2) 21)))" "(finn-nabo-range 2 10)" "(finn-nabo-range 1 10)" "(finn-nabo-range 10 10)" "(int \\"X\\")" "(int (seq \\"A\\"))" "(int (get \\"A\\" 0))" "(- (int (get \\"A\\" 0)) 64)" "(- (int (get \\"C\\" 0)) 64)" "(streng-til-tall \\"C\\")" "(str 65)" "(str (char 65))" "(finn-nabo-range (streng-til-tall \\"C\\") 10)" "(tall-til-streng (finn-nabo-range (streng-til-tall \\"C\\") 10))" "(map tall-til-streng (finn-nabo-range (streng-til-tall \\"C\\") 10))" "(map tall-til-streng (finn-nabo-range (streng-til-tall \\"I\\") 9))" "(finn-nabo-koordinater [\\"B\\", 3])" "(finn-nabo-koordinater [\\"B\\", 3] 9 9)" "(finn-nabo-koordinater [\\"B\\" 3] 9 9)" "(finn-nabo-koordinater [\\"A\\" 1] 9 9)" "(finn-nabo-koordinater [\\"I\\" 9] 9 9)" "(finn-nabo-koordinater (tolk-koordinat-streng \\"I9\\") 9 9)" "(tolk-koordinat-streng \\"I9\\")" "(finn-nabo-koordinater [\\"I\\" 9] 9 9)" "(doc name)" "(finn-nabo-koordinater [\:I \:9] 9 9)" "(name \:9)" "(name \:B)" "(int (name \:9))" "(int \\"67\\")" "(int (read-string \\"56\\"))" "(finn-nabo-koordinater [\:I \:9] 9 9)" "(finn-nabo-koordinater [\:C \:7] 9 9)" "()" "(true? ())" "(finn-nabo-koordinater [\:C \:7] 9 9)" "(finn-nabo-koordinater [\:C \:7] 99 99)" "(finn-nabo-koordinater [\:I \:7] 9 9)" "(finn-nabo-koordinater [\:I \:9] 9 9)" "(finn-nabo-koordinater [\:A \:1] 9 9)" "(finn-nabo-koordinater [\:D \:5] 9 9)" "(finn-nabo-koordinater [\:A \:1] 9 9)" "(finn-nabo-koordinater [\:I \:9] 9 9)" "(finn-nabo-koordinater [\:D \:5] 9 9)" "(tegn-brett [])" "(tegn-brett ())" "(tegn-brett (a b))" "(tegn-brett '(a b))" "(repeat 3 \\"x\\")" "(str (repeat 3 \\"x\\"))" "(str '(\\"a\\", \\"b\\"))" "(map str (repeat 3 \\"x\\"))" "(repeat 3 \\"x\\")" "(concat (repeat 3 \\"x\\"))" "(repeat 3 \\"x\\")" "(reduce str (repeat 3 \\"x\\"))" "(reduce str (repeat 9 \\"+--\\"))" "(str (reduce str (repeat 9 \\"+--\\")) \\"+\\")" "(str (reduce str (repeat 9 \\"+---\\")) \\"+\\")" "(print \\"a\\\\nb\\")" "(tegn-linje 9)" "(str (reduce str (repeat 9 \\"+---\\")) \\"+\\")" "(tegn-linje 9)" "(tegn-brett {\:bredde 9})" "(tolk-koordinat-streng \\"B23\\")" "(cat '(\\"A\\" \\"B\\"))" "(tegn-brett {\:bredde 9})" "(tegn-linje 9)" "(nytt-brett 4 5)" "(nytt-brett 4 5 9)" "(tegn-brett (nytt-brett 4 4 9))" "(str (reduce str (repeat 9 \\"+---\\")) \\"+\\")" "(tegn-brett (nytt-brett 6 5 9))" "(nytt-brett  3 4 5)" "(let b (nytt-brett 9 9 2))" "(def b (nytt-brett 9 9 2))" "(tegn-brett b)" "b" "(tegn-brett (nytt-brett 8 7 4))" "(repeat 2 {\:x \\"a\\"})" "(repeat 5 {\:x \\"a\\"})" "(repeat 5 {\:x (rand)})" "(repeat 5 {\:x \\"a\\"})" "(tegn-brett (nytt-brett 8 7 4))" "(tegn-brett (nytt-brett 18 7 4))" "(rand 10)" "(int (rand 10))" "(+ (int (rand 10)) 1)" "(tilfeldig-tall 10)" "(+ (int (rand 10)) 1)" "(tilfeldig-koordinat (nytt-brett 5 5 5))" "(str 4)" "(tilfeldig-koordinat (nytt-brett 5 5 5))" "(tilfeldig-koordinat (nytt-brett 20 20 5))" "(legg-miner (nytt-brett 5 5 9))" "(legg-miner (nytt-brett 5 5 9) ())" "(legg-miner (nytt-brett 5 5 9))" "(count ())" "(legg-miner (nytt-brett 5 5 9))" "(trace legg-miner)" "(legg-miner (nytt-brett 5 5 9))" "((+ 3 3))" "(list 3)" "(legg-miner (nytt-brett 5 5 9))" "(tilfeldig-koordinat (nytt-brett 4 5 5))" "(list (tilfeldig-koordinat (nytt-brett 4 5 5)))" "(conj '(a b) c)" "(conj '(1 2) 3)" "(list (tilfeldig-koordinat (nytt-brett 4 5 5)))" "(legg-miner (nytt-brett 5 5 9))" "(legg-miner (nytt-brett 5 5 1))" "(legg-miner (nytt-brett 5 5 0))" "(legg-miner (nytt-brett 5 5 55))" "(legg-miner (nytt-brett 5 5 5))" "(legg-miner (nytt-brett 9 9 5))" "(tilfeldig-koordinat (nytt-brett 9 9 5))" "(legg-miner (nytt-brett 5 5 5))" "(finn-nabo-koordinater [\:B \:4] (nytt-brett 5 5 5))" "(finn-nabo-koordinater [\:A \:1] (nytt-brett 5 5 5))" "(map (fn [x] (x)) (range 9) (range 3))" "(map (fn [x] x) (range 9) (range 3))" "(map str (range 9) (range 3))" "(map str (range 9))" "(map (fn [x] (str x)) (range 9))" "(lag-rute [])" "(lag-rute [\:B 2] mine)" "(lag-rute [\:B 2] 'mine)" "(lag-rute \:B 'mine)" "(def mk (legg-miner (nytt-brett 5 5 9)))" "mk" "(contains? mk [\:C \:1])" "(contains? mk [\:C \:2])" "(contains? mk [\:E \:1])" "(lag-rad [\:E \:1] mk)" "(lag-rad [\:C \:2] mk)" "(indeks-til-koordinat 3 4)" "(koordinat-kolonne [\:C \:3])" "mk" "(lag-rad [\:C \:4] mk)" "(lag-rad [\:C \:1] mk)" "(lag-rad [\:C \:5] mk)" "(meta \#'lag-rad)" "(foo)" "(foo 5 5 7)" "(tolk-koordinat-streng \\"B12\\")" "(indeks-til-koordinat 4 5)" "(tilfeldig-koordinat (nytt-brett 5 5 6))" "(legg-miner (nytt-brett 4 4 6))" "(kolonne-indeks \:C12)" "(kolonne-indeks \:A12)" "(rad-indeks \:C12)" "(int \\"13\\")" "(read-string \\"12\\")" "(rad-indeks \:C12)" "(rad-indeks \:C1)" "(rad-indeks \:C12)" "(finn-nabo-koordinater \:A1 (nytt-brett 4 4 5))" "(finn-nabo-koordinater \:C3 (nytt-brett 4 4 5))" "(let [tilfeldig-tall (fn [n] (+ (int (rand n)) 1))] \\n  (indeks-til-koordinat\\r\\n    (tilfeldig-tall 4)\\r\\n    (tilfeldig-tall 5)))" "(legg-miner (nytt-brett 4 4 6))" "(bar)" "bar" "(klarert)" "(sprengt)" "(klarert 3)" "a" "(finn-nabo-koordinater \:C3 (nytt-brett 5 5 5))" "(legg-miner (nytt-brett 5 5  8))" "(tilfeldig-koordinat (nytt-brett 5 5 6))" "(str (tilfeldig-tall))" "(tilfeldig-koordinat (nytt-brett 5 6 7))" "(str 56)" "(tilfeldig-koordinat (nytt-brett 5 6 7))" "(tall-til-streng 23)" "(keyword \\"A\\" \\"2\\")" "(keyword (str \\"A\\" \\"2\\"))" "(tilfeldig-koordinat (nytt-brett 5 6 7))" "(str \\"A\\" 3)" "(tilfeldig-koordinat (nytt-brett 5 6 7))" "(nytt-brett 4 5 6)" "(keyword (str \\"A\\" 4))" "  (let [tilfeldig-tall (fn [n] (+ (int (rand n)) 1))]\\r\\n    (keyword (str\\r\\n               (tall-til-streng (tilfeldig-tall (\:bredde brett))))\\r\\n               (tilfeldig-tall (\:hoyde brett))))" "(tilfeldig-koordinat (nytt-brett 5 6 7))" "(legg-miner\\n  (nytt-brett 5 6 7))" "(indeks-til-koordinat 3 5)" "(legg-miner (nytt-brett 5 5 10))" "(finn-nabo-koordinater \:A1 (nytt-brett 5 5 9))" "(koordinat-kolonne \:B4)" "(koordinat-rad \:C45)" "(int \\"34\\")" "(koordinat-rad \:C45)" "(finn-nabo-koordinater \:A1 (nytt-brett 5 5 9))" "(finn-nabo-koordinater \:B4 (nytt-brett 5 5 9))" "(finn-nabo-koordinater \:E5 (nytt-brett 5 5 9))" "(legg-miner (nytt-brett 5 5 10))" "tilfeldig-koordinat" "(legg-miner (nytt-brett 5 5 10))" "(finn-nabo-koordinater \:A1 (nytt-brett 5 5 6))" "(finn-nabo-koordinater \:B2 (nytt-brett 5 5 6))" "(koordinat-til-indeks \:B34)" "(finn-nabo-koordinater \:B2 (nytt-brett 5 5 6))" "(legg-miner (nytt-brett 5 5 10))" "(let [[a b] [1 2]] b)" "(finn-nabo-koordinater \:B2 (nytt-brett 5 5 6))" "(flatten {\:a 2 \: b3 })" "(finn-nabo-koordinater \:B2 (nytt-brett 5 5 6))" "(legg-miner (nytt-brett 5 5 10))" "(tilfeldig-koordinat (nytt-brett 5 5 3))" "(legg-miner (nytt-brett 5 5 10))" "(finn-nabo-koordinater \:B2 (nytt-brett 5 5 6))" "(tegn-linje 5)" "(indeks-til-koordinat [4 19])" "(finn-nabo-koordinater \:B2 (nytt-brett 5 5 6))" "(legg-miner (nytt-brett 5 5 10))" "(conj [1 2] [3 4])" "(into [1 2] [3 4])" "(nytt-brett 5 5 9)" "(let [a 5 b a] nil)" "(let [a 5 b a] b)" "(nytt-brett 5 5 9)" "(tegn-brett (nytt-brett 5 5 9))" "(nytt-brett 5 5 9)" "(for [r (range 1 (+ 5 1))]\\r\\n        (tegn-linje 6))" "  (let [tegn-linje (fn [bredde] (str (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))]\\r\\n      (for [r (range 1 (+ (\:hoyde brett) 1))]\\r\\n        (tegn-linje (\:bredde brett))))" "  (let [tegn-linje (fn [bredde] (str (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))]\\r\\n      (for [r (range 1 (+ 5 1))]\\r\\n        (tegn-linje 6)))" "  (let [tegn-linje (fn [bredde] (str (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))]\\n    (reduce str\\r\\n      (for [r (range 1 (+ 5 1))]\\r\\n        (tegn-linje 6))))" "  (print (let [tegn-linje (fn [bredde] (str (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))]\\n           (reduce str\\r\\n      (for [r (range 1 (+ 5 1))]\\r\\n        (tegn-linje 6)))))" "(str '(\\"a\\" \\"b\\"))" "(tegn-brett (nytt-brett 5 5 9))" "(print (tegn-brett (nytt-brett 5 5 9)))" "(spill)" "(spill 5 5 9)" "(nytt-brett 5 5 9)" "(print (tegn-brett (nytt-brett 5 5 9)))" "(flatten {\:a 3} {\:b 4})" "(flatten ({\:a 3} {\:b 4}))" "(finn-nabo-koordinater \:B3 (nytt-brett 5 5 9))" "(print (tegn-brett (nytt-brett 5 5 9)))" "(nytt-brett 5 5 10)" "(def brett (nytt-brett 5 5 9))" "(let [tegn-linje (fn [bredde]\\r\\n                     (str \\"   \\" (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))\\r\\n        tegn-topp (fn [bredde]\\r\\n                    (str \\"   \\" (for [k (range bredde)] (str \\"  \\" (tall-til-streng (+ k 1)))) (tegn-linje bredde)))\\r\\n        tegn-rad (fn [brett rad]\\r\\n                   ())\\r\\n        bredde (\:bredde brett)\\r\\n        hoyde (\:hoyde brett)] (tegn-topp 8))" "(let [tegn-linje (fn [bredde]\\r\\n                     (str \\"   \\" (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))\\r\\n        tegn-topp (fn [bredde]\\r\\n                    (str \\r\\n                      \\"   \\" \\r\\n                      (reduce str (for [k (range bredde)] (str \\"  \\" (tall-til-streng (+ k 1)))))\\r\\n                      (tegn-linje bredde)))\\r\\n        tegn-rad (fn [brett rad]\\r\\n                   ())\\r\\n        bredde (\:bredde brett)\\r\\n        hoyde (\:hoyde brett)] (tegn-topp 8))" "(let [tegn-linje (fn [bredde]\\r\\n                     (str \\"   \\" (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))\\r\\n        tegn-topp (fn [bredde]\\r\\n                    (str \\r\\n                      \\"   \\" \\r\\n                      (reduce str (for [k (range bredde)] (str \\"  \\" (tall-til-streng (+ k 1)))))\\n                      \\"\\\\n\\"\\r\\n                      (tegn-linje bredde)))\\r\\n        tegn-rad (fn [brett rad]\\r\\n                   ())\\r\\n        bredde (\:bredde brett)\\r\\n        hoyde (\:hoyde brett)] (tegn-topp 8))" "(print (let [tegn-linje (fn [bredde]\\r\\n                     (str \\"   \\" (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))\\r\\n        tegn-topp (fn [bredde]\\r\\n                    (str \\r\\n                      \\"   \\" \\r\\n                      (reduce str (for [k (range bredde)] (str \\"  \\" (tall-til-streng (+ k 1)))))\\n                             \\"\\\\n\\"\\r\\n                      (tegn-linje bredde)))\\r\\n        tegn-rad (fn [brett rad]\\r\\n                   ())\\r\\n        bredde (\:bredde brett)\\r\\n        hoyde (\:hoyde brett)] (tegn-topp 8)))" "(print (let [tegn-linje (fn [bredde]\\r\\n                     (str \\"   \\" (reduce str (repeat bredde \\"+---\\")) \\"+\\\\n\\"))\\r\\n        tegn-topp (fn [bredde]\\r\\n                    (str \\r\\n                      \\"   \\" \\r\\n                      (reduce str (for [k (range bredde)] (str \\"  \\" (tall-til-streng (+ k 1)) \\" \\")))\\n                             \\"\\\\n\\"\\r\\n                      (tegn-linje bredde)))\\r\\n        tegn-rad (fn [brett rad]\\r\\n                   ())\\r\\n        bredde (\:bredde brett)\\r\\n        hoyde (\:hoyde brett)] (tegn-topp 8)))" "(printf \\"%2s \\", 3)" "(printf \\"%2s \\", 10)" "(format \\"%2s \\", 3)" "(format \\"%2s \\", 10)" "(print (tegn-brett (nytt-brett 5 5 9)))" "(print (tegn-brett (nytt-brett 12 12 19)))" "(def brett (nytt-brett 12 12 19))" "(tegn-brett brett)" "(print tegn-brett brett)" "(print (tegn-brett brett))" "brett" "(get brett \:C10)" "(get brett \:G6)" "(\:G6 brett)" "(brett \:G6)" "(\:bredde brett)" "(legg-miner brett)" "(mine-koordinater brett)" "brett" "(mine-koordinater brett)" "(brett \:K12)" "(brett \:I12)" "(brett \:C10)" "(count (mine-koordinater brett))" "(\:antall-miner brett)" "(map get (mine-koordinater brett))" "(map (fn [k] (k brett)) (mine-koordinater brett))" "get" "(map (fn [k] (get brett k)) (mine-koordinater brett))" "(mine-koordinater brett)" "(concat \\"A\\" \\"B\\")" "(cons a b)" "(cons 'a 'b)" "(cons 'a '(b))" "(cons 4 '(6))" "\\r\\n(def list-of-apples\\r\\n  (list {\:color 'red \:price 5.43}))" "list-of-apples" "\\r\\n(def list-of-apples\\r\\n  (list {\:color 'red \:price 5.43}\\r\\n        {\:color 'green \:price 2.12}\\r\\n        {\:color 'red \:price 9.35}\\r\\n        {\:color 'green \:price 7.34}))" "list-of-apples" "(filter (fn [a] (a color)) list-of-apples)" "(filter (fn [a] (a \:color)) list-of-apples)" "(filter (fn [a] (\= (a \:color) \:red)) list-of-apples)" "(filter (fn [a] (\= (a \:color) 'red)) list-of-apples)" "(reduce \\n  (fn [a] (a \:price))\\n  (filter (fn [a] (\= (a \:color) 'red)) list-of-apples))" "(map\\n  (fn [a] (a \:price))\\n  (filter (fn [a] (\= (a \:color) 'red)) list-of-apples))" "(reduce + (map\\n  (fn [a] (a \:price))\\n  (filter (fn [a] (\= (a \:color) 'red)) list-of-apples)))" "(reduce\\n  + \\n  (map\\n    \#(% \:price)\\n    (filter (fn [a] (\= (a \:color) 'red)) list-of-apples)))" "(reduce + (map \#(% \:price) (filter \#(\= (% \:color) 'red) list-of-apples)))" "(reduce \\n  + \\n  (map \\n    \#(% \:price)\\n    (filter \\n      \#(\= (% \:color) 'red)\\n      list-of-apples)))" "brett" "(antall-nabo-miner \:B3 brett)" "(antall-nabo-miner \:C5 brett)" "(antall-nabo-miner \:C11 brett)" "x" "(get-in x [\:klarer \:sjo])" "((get-in x [\:klarer \:sjo]))" "(eval (get-in x [\:klarer \:sjo]))" "([\:klarer \:sjo] x)" "(x [\:klarer \:sjo])" "(get-in x [\:klarer \:sjox])" "(x)" "brett" "(x brett \:E10 \:klarer)" "(keyword 'a)" "(x brett \:E10 \:klarer)" "(or nil 'a)" "(or 'b 'c)" "(x brett \:E10 \:klarer)" "(x brett \:C10 \:klarer)" "(x brett \:A10 \:klarer)" "(eval + 10 2)" "(eval + (10 2))" "(x brett \:A10 \:klarer)" "(utfor-handling brett \:A10 \:klarer)" "(keyword ['a 'b])" "(keyword \\"XX\\")" "(keyword 'XX)" "(utfor-handling brett \:A10 \:klarer)" "(utfor-handling brett \:A11 \:klarer)" "(utfor-handling brett \:A11 'klarer)" "(def brett (nytt-brett 5 5 12)\\n  )" "(utfor-handling brett \:A4 'klarer)" "(utfor-handling brett \:A2 'klarer)" "brett" "(utfor-handling brett \:D3 'klarer)" "(utfor-handling brett \:A4 'klarer)" "(def orig {\:a 1 \:b 2 \:c 3 \:d 4})" "(def new {\:b 22 \:c 33})" "orig" "new" "(into new original)" "(into new orig)" "(legg-til-manglende-felter new orig)" "new" "orig" "(legg-til-manglende-felter new orig)" "(time )" "(nytt-brett 5 5 9)" "(nytt-brett 4 4 5)" "(legg-miner (nytt-brett 5 5 10))" "(def brett  (nytt-brett 5 5 9))" "(def brett (nytt-brett 5 5 19))" "brett" "(tegn-felt brett \:E5)" "(tegn-felt brett \:D5)" "brett" "(print (tegn-brett brett))" "brett" "(vis-alle-miner brett)" "(nytt-brett 5 5 9)" "(nytt-brett 5 5 90)" "(nytt-brett 5 5 9)" "(nytt-brett 5 5 90)" "(min 90 (/ (* 5 5)))" "(min 90 (/ (* 5 5) 2))" "(int 25/2)" "(min 90 (int (/ (* 5 5) 2)))" "(nytt-brett 5 5 90)" "brett" "(vis-alle-miner brett)" "(tegn-brett (legg-til-manglende-felter brett (vis-alle-miner brett)))" "(legg-til-manglende-felter brett (vis-alle-miner brett))" "(vis-alle-miner brett)" "(flatten {{\:a1 1 \:b2 2} {\:c3 3}})" "(flatten ({\:a1 1 \:b2 2} {\:c3 3}))" "(concat ({\:a1 1 \:b2 2} {\:c3 3}))" "(hash-combine \:a 2)" "(hash-combine [\:a 2])" "(assoc {} ({\:a1 1 \:b2 2} {\:c3 3}))" "(assoc ({\:a1 1 \:b2 2} {\:c3 3}))" "(assoc {} (\:a1 1 \:b2 2 \:c3 3))" "(assoc {} '(\:a1 1 \:b2 2 \:c3 3))" "(assoc {} \:a1 1 \:b2 2 \:c3 3)" "(assoc {\:x 5} \:a1 1 \:b2 2 \:c3 3)" "brett" "(vis-alle-miner brett)" "brett" "(mine-koordinater brett)" "(assoc-in (mine-koordinater brett) 'x)" "(assoc (mine-koordinater brett) 'x)" "(zipmap (mine-koordinater brett) (repeat 'x))" "(vis-alle-miner brett)" "(koordinater-med-status brett 'sjo)" "(koordinater-med-status brett 'mine)" "(koordinater-med-status brett 'sjo)" "brett" "(def brett (nytt-brett 5 5 90))" "(koordinater-med-status brett 'sjo)" "(koordinater-med-status brett 'mine)" "(def brett (nytt-brett 5 5 90))" "brett" "(koordinater-med-status brett 'mine)" "(koordinater-med-status brett 'sjo)" "(flagg-mine brett \:C3)" "brett" "(flagg-mine brett \:A3)" "(conj {\:a 2} {\:b1 4 \:c7 223})" "(defn x [& y] (print y))" "x(2 3 4)" "x(\\"2\\" \\"3\\" \\"4\\")" "(defn x [& y] (print (str y)))" "x(\\"2\\" \\"3\\" \\"4\\")" "brett" "(utfor-handling brett \:E5 \:klarer)" "(utfor-handling brett \:E5 \:flagg)" "(utfor-handling brett \:A4 \:flagg)" "(utfor-handling brett \:E5 \:flagg)" "(utfor-handling brett \:E5 \:klarer)" "(print (tegn-brett (utfor-handling brett \:E5 \:klarer)))" "(conj {\:a 2} {\:a 1 \:b 3})" "(legg-miner {\:antall-miner 12 \:bredde 5 \:hoyde 5})" "(+ 2 3)" "(min 4 78 23 -1)" "(min 4 78 23 -1 333)" "(+ 2 3)" "(sqrt 9)" "(sqr 9)" "(str \\"a\\" \\"b\\")" "(+ 2 3)" "(defn double-it [t] (* t 2))" "(double-it 5)" "(tall-til-streng 3)" "(tall-til-streng 1)" "(tall-til-streng 26)" "(streng-til-tall 5)" "(streng-til-tall \\"E\\")" "[2 3]" "(* 2 [4 5])" "brett" "(nytt-brett 5 5 10)" "(utfor-handling brett koordinat \:klarer)" "(utfor-handling brett \:E5 \:klarer)" "(klarer-nabofelter brett \:D1 {})" "(inc 1)" "(streng-til-tall \\"c\\")" "(inc 1)" "(streng-til-tall \\"c\\")" "(streng-til-tall \\"C\\")" "(streng-til-tall \\"c\\")" "(streng-til-tall \\"C\\")" "brett" "(nytt-brett 3 4 5)" "(kjerne/nytt-brett 5 5 12)" "(require [clj-time.core])" "(clj-time.core/millis)" "(time/date-time)" "(time/now)" "(time/in-millis (time/now))" "(time/millis (time/now))" "(time/milli (time/now))" "(time/now)" "(time/interval (time/now) (time/now))" "(time/interval (time/minus (time/now) (time/minutes 10)) (time/now))" "(time/minus (time/now) (time/minutes 10))" "(time/now)" "(time/minus (time/now) (time/minutes 10))" "(def brukt (time/interval (time/minus (time/now) (time/minutes 10)) (time/now)))" "brukt" "(time/seconds brukt)" "(time/in-seconds brukt)" "(defn a->b [x] (* 2 x))" "(a->b 4)" "(nytt-brett 5 5 90)" "(def brett (nytt-brett 5 5 90))" "(utfor-handling brett \:B5 \:klarer)" "(def brett (nytt-brett 5 5 90))" "brett" "(utfor-handling brett \:B4 'klarer)" "(legg-miner brett)" "(nytt-brett 5 5 90)" "(legg-miner brett)" "(tilfeldig-koordinat brett)" "(def brett (nytt-brett 5 5 90))" "(tilfeldig-koordinat brett)" "(legg-miner brett)" "(klarer-nabofelter brett \:B3 {})" "(legg-miner brett)" "(nytt-brett 5 5 90)9" "(def brett (nytt-brett 5 5 90)\\n  )" "brett" "(finn-nabo-koordinater \:a5 brett)" "(repeatedly rand)" "(take 2 (repeatedly rand))" "(map \#(inc (int %)) (take 2 (repeatedly rand)))" "*ns*" "(defn a+2 [a] (+ a 2))" "(a+2 3)" "list-of-apples" "\\r\\n(def list-of-apples\\r\\n  (list {\:color 'red \:price 5.43}\\r\\n        {\:color 'green \:price 2.12}\\r\\n        {\:color 'red \:price 9.35}\\r\\n        {\:color 'green \:price 7.34}))" "list-of-apples" "(first list-of-apples)" "(rest list-of-apples)" "(def car first)" "(def cdr rest)" "(car list-of-apples)" "(cdr list-of-apples)" "(cons a '(c d e))" "(cons 'a '(c d e))" "(nth list-of-apples 2)" "(nth list-of-apples 0\\n     )" "(map nth list-of-apples)" "((comp inc int rand))" "((comp inc int rand) 5)" "(use minesweeper.kjerne)" "(use 'minesweeper.kjerne)" "(def brett (nytt-brett 5 5 90))" "(tilfeldig-koordinat brett)" "(inc-range 6)" "(range 6)" "((inc-range 6))" "(legg-miner brett)" "brett" "(klarer-nabofelter brett \:C4 {})" "brett" "(use minesweeper.repl)" "(minesweeper.repl/tegn-brett brett)" "brett" "(klarer-nabofelter brett \:D5 {})" "brett" "(use minesweeper.repl)" "(require 'minesweeper.repl)" "(use minesweeper.repl)" "(def brett (nytt-brett 5 5 10)\\n  )" "(def brett (kjerne/nytt-brett 5 5 10)\\n  )" "brett" "(tegn-brett brett)" "brett" "(tegn-brett brett)" "(println (tegn-brett brett))" "brett" "(kjerne/ut brett \:E1 'klarer)" "(kjerne/utfor-handling brett \:E1 'klarer)" "brett" "(kjerne/klarer-nabofelter brett \:A4 {})" "(def nytt-brett (kjerne/legg-til-manglende-felter (kjerne/klarer-nabofelter brett \:A4 {}) brett))" "(kjerne/klarer-nabofelter brett \:A4 {})" "brett" "(def x (kjerne/legg-til-manglende-felter (kjerne/klarer-nabofelter brett \:A4 {}) brett))" "(kjerne/legg-til-manglende-felter {} brett)" "(def x (kjerne/legg-til-manglende-felter (kjerne/klarer-nabofelter brett \:A4 {}) brett))" "(seq brett)" "(first [a b])" "(first [3 4])" "(def x (kjerne/legg-til-manglende-felter (kjerne/klarer-nabofelter brett \:A4 {}) brett))" "x" "(tegn-brett x)" "(tegn-brett (rest x))" "(rest x)" "(def x (kjerne/legg-til-manglende-felter (kjerne/klarer-nabofelter brett \:A4 {}) brett))" "x" "(tegn-brett x)" "(tegn-rad x 1)" "(repl/tegn-rad x 1)" "(use 'minesweeper.repl)" "(repl/tegn-rad x 1)" "(use 'minesweeper.repl \:as 'repl)" "(use 'minesweeper.repl \:as repl)" "(repl/tegn-rad x 1)" "(tegn-rad x 1)" "(tegn-felt \:A1)" "(tegn-felt brett \:A1)" "(tegn-felt brett \:A2)" "(tegn-felt brett \:A3)" "(tegn-felt x \:A1)" "(tegn-felt x \:A2)" "x" "(tegn-felt x \:A3)" "(\:A3 x)" "(tegn-felt x \:A3)" "(kjerne/antall-nabo-miner \:A3)" "(kjerne/antall-nabo-miner brett \:A3)" "(kjerne/finn-nabo-koordinater \:A3)" "(util/nabo-range 1 4)" "(util/nabo-range 3 4)" "(util/nabo-range 4 4)" "(kjerne/finn-nabo-koordinater \:A3 brett)" "(kjerne/finn-nabo-koordinater \:A3 x)" "(kjerne/antall-nabo-miner brett \:A3)" "(kjerne/antall-nabo-miner \:A3 brett)" "(kjerne/antall-nabo-miner \:A3 x)" "(tegn-felt x \:A3)" "(tegn-felt x \:A1)" "(tegn-brett x)" "(println (tegn-brett x))" "(tegn-brett x)" "(println (tegn-brett x))" "x" "(def brett (kjerne/nytt-brett 5 5 10))" "(kjerne/nytt-brett 5 5 10)" "(nytt-brett 5 5 10)" "(def brett (nytt-brett 5 5 10))" "brett" "(utfor-handling brett \:D2 'klarer)" "(require [minesweeper.kjerne \:as kjerne])" "(use 'minesweeper.repl)" "(spill 5 5 10)" "(def b (kjerne/nytt-brett 5 5 10))" "(kjerne/utfor-handling b \:B2 'klarer)" "b" "(kjerne/utfor-handling b \:B2 'klarer)" "(def brett (nytt-brett 5 5 10))" "brett" "(kjerne/utfor-handling b \:B2 'klarer)" "(utfor-handling b \:B2 'klarer)" "(utfor-handling brett \:B2 'klarer)" "(def brett (nytt-brett 5 5 10))" "(utfor-handling brett \:B2 'klarer)" "(spill 5 5 10)" "(repl/spill 5 5 10)" "(spill 5 5 10)" "(conj 'a {})" "(conj {\:a 2} {})" "(conj 2\\n      {})" "(spill 5 5 10)" "brett" "(legg-miner brett)" "{}" "(nil? {})" "(spill 5 5 10)" "(antall-nabo-miner \:C3)" "(def brett (nytt-brett 5 5 10))" "brett" "(println (tegn-brett brett))" "(def brett2 (nytt-brett 5 5 10))" "(println (tegn-brett brett2)\\n         )" "(antall-nabo-miner \:D3 brett2)" "(map \#(antall-nabo-miner % brett2) brett2)" "(map \#(antall-nabo-miner % brett2) (keys brett2))" "(antall-nabo-miner \:B1 brett2)" "(antall-nabo-miner \:B2 brett2)" "(antall-nabo-miner \:D1 brett2)" "(finn-nabo-koordinater \:D1 brett2)" "(println (tegn-brett brett2)\\n         )" "brett2" "(antall-nabo-miner \:C5 brett2)" "(contains? '(mine avslort-mine) 'mine)" "(contains? '(4 5) 5)" "(contains? '[4 5] 5)" "(antall-nabo-miner \:C5 brett2)" "(play 9 9 20)" "(spill 9 9 20)" "brett2" "(def aksjon 'boom)" "((partial aksjon brett2) \:D2)" "b" "brett" "(def aksjon 'klarer-nabofelter)" "((partial aksjon brett) \:E1)" "(partial aksjon brett)" "(map inc (range 4))" "(range 1 (inc 4))" "(spill 9 9 20)" "(koordinater-med-status brett 'min)" "(koordinater-med-status brett 'mine)" "(koordinater-med-status brett 'sjo)" "(map (partial koordinater-med-status brett) ('mine 'sjo))" "(map str (1 2 3))" "(map str '(1 2 3))" "(map (partial koordinater-med-status brett) '(mine sjo))" "(flatten map (partial koordinater-med-status brett) '(mine sjo))" "(flatten (map (partial koordinater-med-status brett) '(mine sjo)))" "(some \#{mine sjo} {\:a2 mine}\\n      )" "(some \#{'mine 'sjo} {\:a2 'mine})" "(some \#{'mine 'sjo} ('a 'b 'mine 'c))" "(set (keys brett))" "(conj 1 (2 3 4))" "(conj 1 '(2 3 4))" "(conj 'a '(b C e))" "(conj '(a b c) 'd)" "(cons 'a '(b c d))" "(some \#{'a} '(b c d a))" "(some \#{'a} '(b c d))" "brett" "(koordinater-med-status brett 'mine)" "(koordinater-med-status brett 'mine 'sjo)" "(koordinater-med-status brett 'sjo)" "brett" "(antall-nabo-miner brett \:E1)" "(finn-nabo-koordinater \:A4 brett)" "(map \#(% brett) (finn-nabo-koordinater \:A4 brett))" "(map \#(% brett) (finn-nabo-koordinater \:E3 brett))" "(filter \#(some \#{%} '(mine avslort-mine)) (map \#(% brett) (finn-nabo-koordinater \:E3 brett)))" "(count (filter \#(some \#{%} '(mine avslort-mine)) (map \#(% brett) (finn-nabo-koordinater \:E3 brett))))" "(antall-nabo-miner E3 brett)" "(antall-nabo-miner \:E3 brett)" "(koordinater-med-status brett 'mine 'sjo)" "(spill 9 9 15)" "(klarer-nabofelter brett \:G1)" "(set (finn-nabo-koordinater \:G1 brett))" "(finn-nabo-koordinater \:G1 brett)" "(finn-nabo-koordinater \:B2 brett)" "(set (finn-nabo-koordinater \:B2 brett))" "(rest (set (finn-nabo-koordinater \:B2 brett)))" "(conj {\:a1 4 \:a2 6} {b3 7})" "(conj {\:a1 4 \:a2 6} {\:b3 7})" "(conj {} {\:b3 7})" "(conj {\:a1 4 \:a2 6} {\:b3 7 \:c2 55})" "(spill 9 9 15)" "(nil? \#{})" "(empty? \#{})" "(spill 9 9 15)" "(rest nil)" "(rest \#{})" "(into (rest \#{}) '(a b c))" "(set (into (rest \#{}) '(a b b c a)))" "(conj {\:a 5 \:b\:6} {\:a 7})" "(conj {\:a 5 \:b 6} {\:a 7})" "(spill 9 9 15)" "(def x (nytt-brett 9 9 12))" "x" "(klarer-nabofelter x \:B2)" "(klarer-nabofelter x \:G4)" "(klarer-nabofelter x \:B2)" "(klarer-nabofelter x \:G4)" "(klarer-nabofelter x \:B2)" "(klarer-nabofelter x \:G4)" "x" "(klarer-nabofelter x \:C4)" "(klarer-nabofelter x \:G3)" "(def x (nytt-brett 9 9 12)\\n  )" "x" "(klarer-nabofelter x \:C7)" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:C7) x)))" "(legg-til-manglende-felter (klarer-nabofelter x \:C7) x)" "x" "(spill 9 9 12)" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:C7) x)))" "(def x (nytt-brett 9 9 12)\\n  )" "x" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:A9) x)))" "(def x (nytt-brett 9 9 12))" "x" "(klarer-nabofelter x \:A9)" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:A9) x)))" "x" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "x" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "(tegn-brett x)" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "x" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "(contains? {\:a2 2 \:b3 3} \:b3)" "(contains? {\:a2 2 \:b3 3} \:b4)" "(\:b4 {\:a2 2 \:b3 3})" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "(into {1 2 3} {})" "(into \#{1 2 3} {})" "(into \#{1 2 3} {4})" "(into \#{1 2 3} (4))" "(into (1 2 3) (4))" "(into '(1 2 3) '(4))" "(into '(1 2 3) nil)" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "(antall-nabo-miner \:D3 x)" "(> 3 2)" "(finn-nabo-koordinater \:D3 x)" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "(list 1)" "(rest '(1))" "(nil? ())" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B3) x)))" "x" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:F8) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:F4) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:B4) x)))" "(legg-til-manglende-felter (klarer-nabofelter x \:B4) x)" "(antall-nabo-miner \:B4 x)" "(finn-nabo-koordinater \:B4 x)" "(map \#(% x) (finn-nabo-koordinater \:B4 x))" "(\:C3 x)" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:A4) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:G4) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:H4) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:H8) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:F8) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:A9) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:I9) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:C7) x)))" "(boooom brett \:A8)" "(boooom x \:A8)" "(def y (legg-til-manglende-felter (boooom x \:A8) x))" "(println (tegn-brett y))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:E4) x)))" "(println (tegn-brett (legg-til-manglende-felter (klarer-nabofelter x \:A1) x)))" "(println (tegn-brett y))" "(koordinater-med-status x 'mine)" "(boooom x \:A8)" "(spill 9 9 12)" "(utfor-handling x \:B2 \:klarer)" "x" "(apply + 1 2 3)" "(apply + '(1 2 3))" "(utfor-handling x \:B2 \:klarer)" "(let [aksjon +] (eval (list aksjon 2 3)))" "(let [aksjon + a 2 b 3] (eval (list aksjon a b)))" "(\:B2 x)" "(utfor-handling x \:B2 'klarer)" "(keyword \:B2)" "(utfor-handling x \:B2 'klarer)" "(klarer-nabofelter x \:B2)" "(klarer-nabofelter x \:A1)" "(keyword (\:A1 x))" "(utfor-handling x \:B2 'klarer)" "(utfor-handling x \:A1 'klarer)" "(klarer-nabofelter x \:A1)" "(let [aksjon +] (apply aksjon '(2 3)))" "(utfor-handling x \:A1 'klarer)" "(spill 9 9 12)" "(eval (list 'klarer-nabofelter \:A1))" "(eval (list 'klarer-nabofelter  x \:A1))" "(eval (list 'klarer-nabofelter  'x \:A1))" "(utfor-handling x \:A1 'klarer)" "x" "(utfor-handling x \:A1 'klarer)" "(utfor-handling x \:C8 'boooom)" "(utfor-handling x \:G3 'flagg-mine)" "(list x)" "(list x \:B3)" "({\:D6 'mine} 2 3)" "(utfor-handling x \:G3 'flagg-mine)" "(let [aksjon +] (aksjon 4 5))" "(utfor-handling x \:G3 'flagg-mine)" "(spill 9 9 12)" "(read-line)" "(string/split \\"A B\\" \\" \\")" "(string/split \\"A B\\" (re-pattern \\" \\"))" "(string/split \\"AB\\" (re-pattern \\" \\"))" "(or nil \\"X\\")" "(keyword 'a)" "(keyword \\"a\\")" "(spill 9 9 12)" "{\:F flagg}" "(string/upper-case nil)" "(keyword nil)" "(spill 9 9 12)" "(nil {\:F 3})" "((keyword nil) {\:F 3})" "(spill 9 9 12)" "(spill 9 9 1)" "(spill 9 9 2)" "(spill 5 5 2)" "(conj nil {\:a 3})" "x" "(count (koordinater-med-status x 'mine))" "(\= (count (koordinater-med-status x 'mine)) 13)" "(\= (count (koordinater-med-status x 'mine)) 12)" "(flagg-mine x \:G7)" "(spill 5 5 2)" "(\\"F\\" {\\"F\\" \:klarer})" "(get {\\"F\\" \:klarer} \\"F\\")" "(spill 5 5 5)" "(les-trekk)" "(spill 5 5 5)" "x" "(let [koordinat handling] (les-trekk) (utfor-handling x koordinat handling))" "(let [[koordinat handling] (les-trekk)] (utfor-handling x koordinat handling))" "(spill 5 5 5)" "(les-trekk)" "(spill 5 5 5)" "(les-trekk)" "(string/split (string/upper-case (read-line)) (re-pattern \\" \\"))" "(les-trekk)" "(zero? 1)" "(zero? 0)" "(nytt-brett 5 5 5)" "(endre-felt-status)" "(def x (nytt-brett 5 5 10))" "(endre-felt-status brett 'mine 'avslort-mine 'sjo 'markert-sjo)" "(endre-felt-status x 'mine 'avslort-mine 'sjo 'markert-sjo)" "(endre-felt-status x 'mine 'avslort-mine)" "(spill 5 5 10)" "(spill 9 9 10)" "(set (repeatedly rand))" "(take 2 (set (repeatedly rand)))" "(spill 9 9 10)" "x" "nytt-brett" "(spill 9 9 10)" "(spillet-er-slutt (nytt-brett 9 9 10))" "(some \#{2} '(1 2 3))" "(some \#{2} '(1 4 3))" "(nil? (some \#{2} '(1 4 3)))" "(spill 9 9 10)" "(time/seconds (time/interval (time/now) (time/now)))" "(time/in-seconds (time/interval (time/now) (time/now)))" "(spill 9 9 10)" "(true? 4)" "(spill 9 9 10)"]
eclipse.preferences.version=1
